generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  dob       DateTime
  gender    Gender
  address   String
  mobile    String   @unique
  password  String
  stores    Store[]
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id          String    @id @default(uuid())
  name        String    @unique
  products    Product[]
  address     String
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  createdAt   DateTime  @default(now())
  pictures    Photo[]
  description String
  orders      Order[]
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String   @unique
  price       Float
  stock       Int
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String
  pictures    Photo[]
  description String
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Photo {
  id        String   @id @default(uuid())
  url       String
  height    Int
  width     Int
  filename  String
  store     Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
}

model Order {
  id                  String        @id @default(uuid())
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  store               Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId             String
  product             Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId           String
  quantity            Int
  paid                Boolean       @default(false)
  paymentMethod       PaymentMethod
  delivered           Boolean       @default(false)
  deliveredAt         DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  succesfulPayment    Payment?      @relation(name: "SuccessfulPayment")
  successfulPaymentId String?       @unique
  failedPayments      Payment[]     @relation("FailedPayments")
}

model Payment {
  id                String  @id @default(uuid())
  order             Order?  @relation(fields: [orderId], references: [id], name: "SuccessfulPayment")
  orderId           String? @unique
  razorpayOrderId   String  @unique
  razorpayPaymentId String  @unique
  status            String
  amount            Float
  currency          String
  method            String
  failedForOrder    Order?  @relation(fields: [failedForOrderId], references: [id], name: "FailedPayments")
  failedForOrderId  String?
}

enum Gender {
  male
  female
  other
}

enum PaymentMethod {
  cash
  card
  upi
  netbanking
}
